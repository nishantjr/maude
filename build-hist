#!/usr/bin/env bash

# This file implements a DSL to rebuild the history of this from Steven Eker's
# source commits. Using this DLS allows us to have a "second order" versioning
# over the history itself, and allows us to revert to previous histories
# if we mess up, as we poor humans do.
#
# As humans, we are vain too, and so go through the trouble to pretend that
# every commit we do is close to perfect. Thus we often go back and rewrite
# history. To allow doing this easily, we commit the patches themselves.
#
# Patches are generated using `git format-patch -1 <ref>`.
# We don't try to use Eker's changes as patches since they'd be to unweildy to
# manage.
#

set -e
base_dir="$(cd "$(dirname "$0")"; pwd)"

# DSL Implementation
# ==================

reset_worktree() {
    local worktree="$1"; shift
    cd "$base_dir"
    rm -rf "$worktree"
    git worktree prune
    git worktree add --detach "$worktree"
    cd "$worktree"
}

checkout() {
    local branch="$1"; shift
    local begin_ref="$1"; shift

    git checkout -b "$branch" "$begin_ref"
}

apply_patch() {
    patch_name="$1"; shift
    git show "$builder_branch:patches/$patch_name" | git am
}

merge_range() {
    while read ref; do
        merge "$ref"
    done < <(git rev-list --reverse "$@")
}

merge() {
    local ref="$1"; shift
    git clean -dfx
    git merge --quiet --no-commit --strategy recursive --strategy-option ours "$ref" || true
    git ls-files --ignored --exclude-standard | sort -u | xargs -I file rm file
    git add -u

    local message="Import $(git log -1 --format=%s $ref)"
    local date="$(git log -1 --format=%ad $ref)"

# We set these variables to make commit SHAs deterministic. Since this causes
# the commit SHA to be determined only by it's tree and parents' SHAs, it makes
# it easy to compare two different histories and see exactly where they diverge.
#
    TZ=UTC                                            \
    GIT_COMMITTER_DATE="$date"                        \
    GIT_COMMITTER_NAME="Generated by"                 \
    GIT_COMMITTER_EMAIL="derive-from-eker@maude-team" \
    GIT_AUTHOR_DATE="$date"                           \
    GIT_AUTHOR_NAME="Generated by"                    \
    GIT_AUTHOR_EMAIL="derive-from-eker@maude-team"    \
        git commit -m "$message"
}

# Main
# ====

hist_dir='histories'
builder_branch="second-order/hist-rebuilder"

usage() {
    echo "usage: $0 <history>

    <history>: File in '$hist_dir/' specifying the history to build.
               Options are: $(ls $hist_dir/ | tr '\n' ' ')
"
    exit 1
}

history="$hist_dir/$1" || usage
[[ -f "$history" ]]    || usage
checkout "rebuild/$1" 'eker/maude-2.0.1^'
source "$history"
