==========================================
reduce in BOUND : not unbounded < 3 .
rewrites: 3
result Bool: true
==========================================
reduce in BOUND : 3 < unbounded .
rewrites: 1
result Bool: true
==========================================
reduce in BOUND : unbounded < unbounded =/= true and unbounded < unbounded =/=
    false .
rewrites: 3
result Bool: true
==========================================
reduce in BOUND : continue(3,5) == 4,5 .
rewrites: 3
result Bool: true
==========================================
reduce in BOUND : continue(3,unbounded) == 4,unbounded .
rewrites: 3
result Bool: true
==========================================
reduce in BOUND : continue(3,4) :: Depth .
rewrites: 3
result Bool: true
==========================================
reduce in BOUND : continue(3,unbounded) :: Depth .
rewrites: 3
result Bool: true
==========================================
reduce in BOUND : not continue(unbounded,unbounded) :: Depth .
rewrites: 3
result Bool: true
==========================================
reduce in BOUND : not continue(5,3) :: Depth .
rewrites: 4
result Bool: true
==========================================
reduce in META-LEVEL : metaNarrowingApply(upModule('EXT-CYCLE, true), 'f[
    'a.PreState], empty, '#, 0) == {
  'f['b.PreState],'State,
  [],
  'a2b,(none).Substitution,(none).Substitution,
  '%
} .
rewrites: 5
result Bool: true
==========================================
reduce in META-LEVEL : metaNarrowingApply(upModule('EXT-CYCLE, true), 'f[
    'a.PreState], empty, '#, 1) == {
  'g['c.PreState],'State,
  [],
  'a2c,(none).Substitution,(none).Substitution,
  '%
} .
rewrites: 5
result Bool: true
==========================================
reduce in META-LEVEL : metaNarrowingApply(upModule('EXT-CYCLE, true), 'f[
    'a.PreState], empty, '#, 2) == (failure).NarrowingApplyResult? .
rewrites: 4
result Bool: true
Bye.
