load ../tools/varsat/numbers.maude

--- Version 1 - RL
--- --------------

fmod BAKERY-STATE is
  pr NAT* .
  sort Conf .
  sort Mode ModeWait ModeIdle .
  subsort ModeIdle ModeWait < Mode .
  sort ProcIdle ProcWait Proc ProcSet .
  subsort ProcIdle ProcWait < Proc < ProcSet .

  op idle  :                   -> ModeIdle [ctor] .
  op wait  : Nat*              -> ModeWait [ctor] .
  op crit  : Nat*              -> Mode     [ctor] .
  op [_,_] : Nat* ModeIdle     -> ProcIdle  [ctor] .
  op [_,_] : Nat* ModeWait     -> ProcWait  [ctor] .
  op [_,_] : Nat* Mode         -> Proc      [ctor] .
  op none  :                   -> ProcSet   [ctor] .
  op __    : ProcSet ProcSet   -> ProcSet   [ctor assoc comm id: none] .

  op _;_;_ : Nat* Nat* ProcSet -> Conf  [ctor] .
endfm

mod REVERSE-BAKERY is
  pr BAKERY-STATE .
  sort State .

  op <_>   : Conf              -> State [ctor] .
  op [_]   : Conf              -> State [ctor] .

  var N M I : Nat* .
  var S : ProcSet .

  rl [wake]: < N :+ 1 ; M      ; [I,wait(N)] S > => < N ; M ; [I,idle   ] S > .
  rl [crit]: < N      ; M      ; [I,crit(M)] S > => < N ; M ; [I,wait(M)] S > .
  rl [exit]: < N      ; M :+ 1 ; [I,idle   ] S > => < N ; M ; [I,crit(M)] S > .
  rl [term]: < C:Conf > => [ C:Conf ] .
endm

--- Version 2 - LMC
--- ---------------

--- Lamport's Bakery protocol in Maude.
--- From: All About Maude - A High-Performance Logical Framework.
fmod BAKERY-SYNTAX is
  sort Name .
  op 0 : -> Name [ctor] .
  op s : -> Name [ctor] .
  op __ : Name Name -> Name [ctor comm assoc id: 0] .

  sorts ModeIdle ModeWait ModeCrit Mode .
  subsorts ModeIdle ModeWait ModeCrit < Mode .
  sorts ProcIdle ProcWait Proc ProcIdleSet ProcWaitSet ProcSet .
  subsorts ProcIdle < ProcIdleSet .
  subsorts ProcWait < ProcWaitSet .
  subsorts ProcIdle ProcWait < Proc < ProcSet .
  subsorts ProcIdleSet < ProcWaitSet < ProcSet .

  op idle : -> ModeIdle .
  op wait : Name -> ModeWait .
  op crit : Name -> ModeCrit .
  op `[_`] : ModeIdle -> ProcIdle .
  op `[_`] : ModeWait -> ProcWait .
  op `[_`] : Mode -> Proc .
  op none : -> ProcIdleSet .
  op __ : ProcIdleSet ProcIdleSet -> ProcIdleSet [assoc comm id: none] .
  op __ : ProcWaitSet ProcWaitSet -> ProcWaitSet [assoc comm id: none] .
  op __ : ProcSet ProcSet -> ProcSet [assoc comm id: none] .

  sort Conf .
  op _;_;_ : Name Name ProcSet -> Conf .
endfm

mod BAKERY is
  protecting BAKERY-SYNTAX .

  var PS : ProcSet .  vars N M : Name .

  rl [wake] : N ; M ; [idle]    PS => s N ; M   ; [wait(N)] PS .
  rl [crit] : N ; M ; [wait(M)] PS => N   ; M   ; [crit(M)] PS .
  rl [exit] : N ; M ; [crit(M)] PS => N   ; s M ; [idle]    PS .
endm
